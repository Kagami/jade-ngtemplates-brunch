// Generated by CoffeeScript 1.6.3
(function() {
  var JadeNgtemplates, fs, jade, minify, _;

  fs = require("fs");

  _ = require("lodash");

  jade = require("jade");

  minify = require("html-minifier").minify;

  module.exports = JadeNgtemplates = (function() {
    JadeNgtemplates.prototype.brunchPlugin = true;

    JadeNgtemplates.prototype.type = "template";

    JadeNgtemplates.prototype.extension = "jade";

    JadeNgtemplates.prototype.DEFAULT_MODULE_CONFIG = {
      name: "partials",
      pattern: /^app[\/\\]/,
      url: function(path) {
        path.replace(/\\/g, "/");
        return "/" + path;
      }
    };

    JadeNgtemplates.prototype.DEFAULT_JADE_OPTIONS = {
      doctype: "html"
    };

    JadeNgtemplates.prototype.DEFAULT_HTMLMIN_OPTIONS = {
      removeComments: true,
      removeCommentsFromCDATA: true,
      removeCDATASectionsFromCDATA: true,
      collapseBooleanAttributes: true,
      removeAttributeQuotes: true,
      useShortDoctype: true,
      removeEmptyAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true
    };

    function JadeNgtemplates(config) {
      var htmlminConfig, jadeConfig, modulesConfig, pluginConfig, _ref,
        _this = this;
      this.optimize = config.optimize;
      pluginConfig = (_ref = config.plugins) != null ? _ref.jadeNgtemplates : void 0;
      modulesConfig = (pluginConfig != null ? pluginConfig.modules : void 0) || [this.DEFAULT_MODULE_CONFIG];
      this.modulesConfig = modulesConfig.map(function(m) {
        return _.extend({}, _this.DEFAULT_MODULE_CONFIG, m);
      });
      jadeConfig = _.extend({}, pluginConfig != null ? pluginConfig.jade : void 0);
      this.jadeLocals = jadeConfig.locals;
      delete jadeConfig.locals;
      this.jadeOptions = _.extend(jadeConfig, this.DEFAULT_JADE_OPTIONS);
      if (this.optimize) {
        this.jadeOptions.pretty = false;
      }
      this.htmlmin = false;
      if (this.optimize) {
        htmlminConfig = pluginConfig != null ? pluginConfig.htmlmin : void 0;
        if (_.isBoolean(htmlminConfig)) {
          this.htmlmin = htmlminConfig;
          this.htmlminOptions = _.extend({}, this.DEFAULT_HTMLMIN_OPTIONS);
        } else if (_.isObject(htmlminConfig)) {
          this.htmlmin = true;
          this.htmlminOptions = _.extend({}, htmlminConfig);
        }
      }
    }

    JadeNgtemplates.prototype.findModuleConfig = function(path) {
      /*
      Return module config for the given file path.
      */

      return _.find(this.modulesConfig, function(m) {
        return m.pattern.test(path);
      });
    };

    JadeNgtemplates.prototype.wrapWithTemplateCache = function(data, path) {
      /*
      Wrap compiled template string with the angular templateCache
      directions.
      */

      var url, urlGenerator;
      urlGenerator = this.findModuleConfig(path).url;
      url = urlGenerator(path);
      data = data.replace(/'/g, "\\'");
      if (this.optimize) {
        return "t.put('" + url + "','" + data + "');";
      } else {
        return "\n  $templateCache.put('" + url + "', '" + data + "');";
      }
    };

    JadeNgtemplates.prototype.compile = function(data, path, callback) {
      var err, error, isTemplate, result, templateFn;
      isTemplate = _.any(this.modulesConfig, function(m) {
        return m.pattern.test(path);
      });
      if (!isTemplate) {
        callback(null, "");
        return;
      }
      try {
        templateFn = jade.compile(data, this.jadeOptions);
        result = templateFn(this.jadeLocals);
        if (this.htmlmin) {
          result = minify(result, this.htmlminOptions);
        }
        return result = this.wrapWithTemplateCache(result, path);
      } catch (_error) {
        err = _error;
        return error = err;
      } finally {
        callback(error, result);
      }
    };

    JadeNgtemplates.prototype.wrapWithModule = function(data, module) {
      /*
      Wrap compiled templates with the angular module definition.
      */

      var moduleName;
      moduleName = module.name.replace(/'/g, "\\'");
      if (this.optimize) {
        return ("angular.module('" + moduleName + "',[])") + (".run(['$templateCache',function(t){" + data + "\n}])");
      } else {
        return "angular.module('" + moduleName + "', []).run(function($templateCache) {\n" + data + "\n});\n";
      }
    };

    JadeNgtemplates.prototype.onCompile = function(generatedFiles) {
      var data, generated, module, source, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = generatedFiles.length; _i < _len; _i++) {
        generated = generatedFiles[_i];
        if (!generated.sourceFiles.length) {
          continue;
        }
        source = generated.sourceFiles[0];
        if (source.type !== "template") {
          continue;
        }
        module = this.findModuleConfig(source.path);
        if (module == null) {
          continue;
        }
        data = fs.readFileSync(generated.path, {
          encoding: "utf8"
        });
        data = this.wrapWithModule(data, module);
        _results.push(fs.writeFileSync(generated.path, data));
      }
      return _results;
    };

    return JadeNgtemplates;

  })();

}).call(this);
